These are notes on the plug-in architecture.

Plug-ins are .pm files stored in the gbrowse.conf/plugins directory.
There are three types of plugins:

      1) dumpers
	 These plugins receive the genomic segment object and generate
	 a dump -- the output can be text, html or some other
	 specialized format. Example: GAME dumper.

      2) finders
	 These plugins accept input from the user and return a list of
	 genomic regions.  The main browser displays the found regions
	 and allows the user to select among them. Example: BLAST search.

      3) annotators
	 These plugins receive the genomic segment object and
	 return a list of features which are overlayed on top 
	 of the detailed view.  Example: restriction site annotator.
	
All plug-ins inherit from Bio::Graphics::Browser::Plugin.  The
following methods are implemented by them all:

$string = $plugin->name();
  Return a short name for the plugin.  This will be displayed to
  the user in a menu using one of the following forms:

      Dump <name>
      Find <name>
      Annotate <name>

$string = $plugin->description();
  Return a longer description for the plugin.  May contain HTML tags.
  Invoked in response to the "About..." button.

$string = $plugin->type();
  Return one of "dumper", "finder", "annotator".  The default is
  "dumper".

$settings = $plugin->config_defaults();
  Generate a hashref containing settings.  This will be stored
  between sessions in a cookie.  Because of limited serialization
  and cookie space restraints, the values of the settings hash
  must be scalars or array refs.

$plugin->configuration($current_settings);
  Get/set current settings.  This will be called before 
  change_configuration()

$plugin->configure_form();
  Generate an HTML form that prompts user to set/change current
  configuration.  The fragment will automatically be surrounded by 
  <FORM> and </FORM> tags.  
  All form fields must be preceded with the plug-in's name,
  in the format "<name>.<field>" (a dot separates the two).
  
$plugin->reconfigure
  This gives the plugin a chance to reconfigure itself
  after its form is submitted.  It should call the CGI param()
  method to get its arguments. This will only be called
  if param() returns at least one parameter name that begins
  with the plugin's name.

$plugin->database($database)
  A chance to store a copy of the Bio::DB::GFF or Gadfly
  database handle.

$plugin->config_file($bio_graphics_browser)
  A chance to store a copy of the Bio::Graphics::Browser
  interface to the current configuration file.

$plugin->config_path($path)
  A chance to store a copy of the gbrowse configuration
  directory path.

$plugin->page_settings($settings)
  A chance to store the current settings on the GBrowse page.

$plugin->dump($segment);
  Dump out the data (dumpers only).  Must generate an HTTP header 
  with MIME type.

@segments = $plugin->find($segment); 
  Do a find (finders only) and return a set of triplets of form
  [ref,start,stop].  If further configuration is needed return undef
  -- gbrowse will invoke change_configuration() and try again.  If
  nothing is found, return empty list.
  NOTE: You can ignore the segment and do the find on the whole 
  database if that's more appropriate.  If you need auxiliary files
  like BLAST files, you can store that information in the .conf
  file or handle your own conf files.

$feature_file = $plugin->annotate($segment)
  Annotate the segment and return a Bio::Graphics::FeatureFile
  object containing the annotations.  This is then plugged into
  the detailed view and track configurator.
  NOTE: Bio::Graphics::FeatureFile is going to need a little work
  to make it easier to generate tracks dynamically.
	
