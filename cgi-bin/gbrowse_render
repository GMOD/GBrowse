#!/usr/bin/perl

use strict;
use Data::Dumper;
use CGI qw(header param escape unescape);
use Storable qw(freeze thaw retrieve);
#use LWP::Parallel;
#use LWP::Parallel::UserAgent;

use lib '/Users/mokada/development/gsoc/head/Generic-Genome-Browser/libnew',
'/Users/mokada/development/gsoc/head/Generic-Genome-Browser/lib';
#use Bio::Graphics::Browser::Render;
#use Bio::Graphics::Browser::PluginSet;
use Bio::Graphics::Browser::RenderTracks;
use Bio::Graphics::Browser::DataSource;

use Bio::Graphics::Browser::Shellwords;



print header();

my %args;
foreach my $key (param()) {
 my $value = thaw(param($key));
  $args{$key} = $value;
}

#extract arguments
my $tracks	= $args{'tracks'};
my $settings	= $args{'settings'};
my $datasource	= $args{'datasource'};
my $language	= $args{'language'};
#my $session	= $args{'session'};
#my $paramargs	= $args{'paramargs'};

print fatal_error("Missing arguments") unless $tracks && $settings && $datasource && $language;

my @result_tracks;

# extract db
my $db = init_database($datasource, $settings);

# extract segments
my $segments = $db->segment(-name	=> $settings->{'ref'},
			    -start	=> $settings->{'start'},
			    -stop	=> $settings->{'stop'});

# generate the panels
my $renderer = Bio::Graphics::Browser::RenderTracks->new(-segment  => $segments,
							  -source   => $datasource,
							  -settings => $settings);

my $panels = $renderer->generate_panels(-db      => $db,
						     -tracks  => $tracks);

# create the gd object and maps
for my $track (keys %$panels) {
  my $panel = $panels->{$track};
  my $image_map = $track eq '__scale__' ? $renderer->make_centering_map($panel)
  	: $renderer->make_map($panel, $track, $language);
  
  push @result_tracks, [$track, $panel->gd, $image_map];
}


#for debugging, return still image and map
#my $var = retrieve ('/Users/mokada/development/testing/temp/triplets.dat');
#my ($track_name, $gd, $image_map) = @$var;
#push @result_tracks, [$track_name, $gd, $image_map];




#print freeze([[$track_name, $gd, $image_map]]);
print freeze(\@result_tracks);

exit;


###############################################################################################
########## SUB ROUTINES #######################################################################
###############################################################################################

sub init_database {
  my $datasource = shift;
  my $settings = shift;
  my $db  = $datasource->open_database();

  # I don't know what this is for, but it was there in gbrowse and looks like an important hack.
  eval {$db->biosql->version($settings->{version})};

  $db;
}

sub init_plugins {
  my $datasource = shift;
  my $settings = shift;
  my $language = shift;
  my $db = shift;
  my $session = shift;
  
  my @plugin_path = shellwords($datasource->globals->plugin_path);
  
  my $plugins = Bio::Graphics::Browser::PluginSet->new($datasource,$settings, $language, @plugin_path);
  fatal_error("Could not initialize plugins") unless $plugins;
  $plugins->configure($db, $settings, $language, $session);
  
  $plugins;
}

sub fatal_error {
  print shift;
  print "<br>\n";
  print_usage();
  exit;
}

sub print_usage {
  print "Pass in frozen args through url, get back frozen track images and maps.";
  ## print instructions later
}
